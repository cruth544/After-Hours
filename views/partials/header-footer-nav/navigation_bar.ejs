<div id = "navBar">

  <!-- LOGO -->
  <div id = "afterHoursLogo"></div>
  <!-- Search Box -->
  <div id="searchBox">
    <input type="search" id="search" placeholder="Enter city or address">
    <button onclick="myFunction()">Let's Get Drunk!</button>
  </div>

  <div id = "rightSideNav">
  <% if( curr_user ){ %>
    <h5> Welcome: <%= curr_user %></h5>
    <div id = "logOut"><a class="btn btn-link" role="button" id= "logOut" href="/logout">LOG OUT</a></div>

  <% } else{ %>
        <div id = "signUp"><a class="btn btn-link" role="button" id= "signUp" data-toggle="modal" data-target="#mySignupModal">SIGN UP</a></div>
        <div id = "logIn"><a class="btn btn-link" role="button" id= "logIn" data-toggle="modal" data-target="#myLoginModal">LOG IN</a></div>
  <% } %>
  </div>


</div>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>
    <input id="pac-input" class="controls" type="text" placeholder="Search Box">
    <div id="map"></div>

<script>
// This example adds a search box to a map, using the Google Place Autocomplete
// feature. People can enter geographical searches. The search box will return a
// pick list containing a mix of places and predicted search terms.

// This example requires the Places library. Include the libraries=places
// parameter when you first load the API. For example:
// <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">

function initAutocomplete() {
  var map = new google.maps.Map(document.getElementById('map'), {
    center: {lat: -33.8688, lng: 151.2195},
    zoom: 13,
    mapTypeId: google.maps.MapTypeId.ROADMAP
  });

  // Create the search box and link it to the UI element.
  var input = document.getElementById('pac-input');
  var searchBox = new google.maps.places.SearchBox(input);
  map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

  // Bias the SearchBox results towards current map's viewport.
  map.addListener('bounds_changed', function() {
    searchBox.setBounds(map.getBounds());
  });

  var markers = [];
  // [START region_getplaces]
  // Listen for the event fired when the user selects a prediction and retrieve
  // more details for that place.
  searchBox.addListener('places_changed', function() {
    var places = searchBox.getPlaces();

    if (places.length == 0) {
      return;
    }

    // Clear out the old markers.
    markers.forEach(function(marker) {
      marker.setMap(null);
    });
    markers = [];

    // For each place, get the icon, name and location.
    var bounds = new google.maps.LatLngBounds();
    places.forEach(function(place) {
      var icon = {
        url: place.icon,
        size: new google.maps.Size(71, 71),
        origin: new google.maps.Point(0, 0),
        anchor: new google.maps.Point(17, 34),
        scaledSize: new google.maps.Size(25, 25)
      };

      // Create a marker for each place.
      markers.push(new google.maps.Marker({
        map: map,
        icon: icon,
        title: place.name,
        position: place.geometry.location
      }));

      if (place.geometry.viewport) {
        // Only geocodes have viewport.
        bounds.union(place.geometry.viewport);
      } else {
        bounds.extend(place.geometry.location);
      }
    });
    map.fitBounds(bounds);
  });
  // [END region_getplaces]
}


    </script>
    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyDZYqdGCiP3a1xbvJsYYbAt5ZEoe896axU&libraries=places&callback=initAutocomplete"
         async defer></script>
<script>
function myFunction() {
    var x = document.getElementById("mySearch").placeholder;
    document.getElementById("demo").innerHTML = x;
}
</script>
